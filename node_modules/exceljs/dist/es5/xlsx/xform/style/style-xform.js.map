{"version":3,"sources":["../../../../../lib/xlsx/xform/style/style-xform.js"],"names":["BaseXform","require","AlignmentXform","StyleXform","options","xfId","map","alignment","xmlStream","model","openNode","numFmtId","fontId","fillId","borderId","addAttribute","render","closeNode","node","parser","parseOpen","name","parseInt","attributes","text","parseText","parseClose","undefined","module","exports"],"mappings":"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","sourcesContent":["const BaseXform = require('../base-xform');\n\nconst AlignmentXform = require('./alignment-xform');\n\n// <xf numFmtId=\"[numFmtId]\" fontId=\"[fontId]\" fillId=\"[fillId]\" borderId=\"[xf.borderId]\" xfId=\"[xfId]\">\n//   Optional <alignment>\n// </xf>\n\n// Style assists translation from style model to/from xlsx\nclass StyleXform extends BaseXform {\n  constructor(options) {\n    super();\n\n    this.xfId = !!(options && options.xfId);\n    this.map = {\n      alignment: new AlignmentXform(),\n    };\n  }\n\n  get tag() {\n    return 'xf';\n  }\n\n  render(xmlStream, model) {\n    xmlStream.openNode('xf', {\n      numFmtId: model.numFmtId || 0,\n      fontId: model.fontId || 0,\n      fillId: model.fillId || 0,\n      borderId: model.borderId || 0,\n    });\n    if (this.xfId) {\n      xmlStream.addAttribute('xfId', model.xfId || 0);\n    }\n\n    if (model.numFmtId) {\n      xmlStream.addAttribute('applyNumberFormat', '1');\n    }\n    if (model.fontId) {\n      xmlStream.addAttribute('applyFont', '1');\n    }\n    if (model.fillId) {\n      xmlStream.addAttribute('applyFill', '1');\n    }\n    if (model.borderId) {\n      xmlStream.addAttribute('applyBorder', '1');\n    }\n\n    if (model.alignment) {\n      xmlStream.addAttribute('applyAlignment', '1');\n      this.map.alignment.render(xmlStream, model.alignment);\n    }\n\n    xmlStream.closeNode();\n  }\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    // used during sax parsing of xml to build font object\n    switch (node.name) {\n      case 'xf':\n        this.model = {\n          numFmtId: parseInt(node.attributes.numFmtId, 10),\n          fontId: parseInt(node.attributes.fontId, 10),\n          fillId: parseInt(node.attributes.fillId, 10),\n          borderId: parseInt(node.attributes.borderId, 10),\n        };\n        if (this.xfId) {\n          this.model.xfId = parseInt(node.attributes.xfId, 10);\n        }\n        return true;\n      case 'alignment':\n        this.parser = this.map.alignment;\n        this.parser.parseOpen(node);\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  }\n\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.model.alignment = this.parser.model;\n        this.parser = undefined;\n      }\n      return true;\n    }\n    return name !== 'xf';\n  }\n}\n\nmodule.exports = StyleXform;\n"],"file":"style-xform.js"}